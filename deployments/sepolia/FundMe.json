{
  "address": "0x4fC38350C4acA408ed13eB2a4E8bdFc0724202Ce",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x35680985a13d2c83be60a417987f46cfbdf5f9b5ba7def93ec1c0ea7c3fab51d",
  "receipt": {
    "to": null,
    "from": "0x7e05eA2464E2cC0c20500569aD2B0e5BC4afdc50",
    "contractAddress": "0x4fC38350C4acA408ed13eB2a4E8bdFc0724202Ce",
    "transactionIndex": 8,
    "gasUsed": "892396",
    "logsBloom": "0x
    "blockHash": "0xe5131a7b9104feca0157bcc9dbeb735f0a79ed2d927ef313c4ce3993d502c088",
    "transactionHash": "0x35680985a13d2c83be60a417987f46cfbdf5f9b5ba7def93ec1c0ea7c3fab51d",
    "logs": [],
    "blockNumber": 3555484,
    "cumulativeGasUsed": "2055607",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x694AA1769357215DE4FAC081bf1f309aDC325306"
  ],
  "numDeployments": 3,
  "solcInputHash": "277b192641f2be0cd38dfd28ece4c005",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror NotOwner();\\n\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    mapping(address => uint256) public addressToAmountFunded;\\n    address[] public funders;\\n\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    address public immutable i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n\\n    AggregatorV3Interface public priceFeed;\\n\\n    modifier onlyOwner() {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert NotOwner();\\n        _;\\n    }\\n\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        addressToAmountFunded[msg.sender] += msg.value;\\n        funders.push(msg.sender);\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            addressToAmountFunded[funder] = 0;\\n        }\\n        funders = new address[](0);\\n        // transfer\\n        payable(msg.sender).transfer(address(this).balance);\\n        // send\\n        bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    // Explainer from: https://solidity-by-example.org/fallback/\\n    // Ether is sent to contract\\n    //      is msg.data empty?\\n    //          /   \\\\\\n    //         yes  no\\n    //         /     \\\\\\n    //    receive()?  fallback()\\n    //     /   \\\\\\n    //   yes   no\\n    //  /        \\\\\\n    //receive()  fallback()\\n}\\n\\n// Concepts we didn't cover yet (will cover in later sections)\\n// 1. Enum\\n// 2. Events\\n// 3. Try / Catch\\n// 4. Function Selector\\n// 5. abi.encode / decode\\n// 6. Hash with keccak256\\n// 7. Yul / Assembly\\n\",\"keccak256\":\"0xca7235d5b9c108606b7c3c52493f083467a6cba22768ccd0c5dfb844c4e106d7\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        // Sepolia ETH / USD Address\\n        // https://docs.chain.link/data-feeds/price-feeds/addresses#Sepolia%20Testnet\\n\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n        // or (Both will do the same thing)\\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // or (Both will do the same thing)\\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0xd1f0e22d64716d4e89537f5acbd0726af073c21ca4fb489ac6721c66303aee08\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051620010253803806200102583398181016040528101906100349190610112565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061013f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100df826100b4565b9050919050565b6100ef816100d4565b81146100fa57600080fd5b50565b60008151905061010c816100e6565b92915050565b600060208284031215610128576101276100af565b5b6000610136848285016100fd565b91505092915050565b608051610ec362000162600039600081816102e501526106310152610ec36000f3fe6080604052600436106100745760003560e01c8063741bef1a1161004e578063741bef1a1461010c578063b60d428814610137578063dba6335f14610141578063dc0d3dff1461016c57610083565b80633ccfd60b1461008d5780633e47d6f3146100a45780636b69a592146100e157610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102e3565b005b3480156100b057600080fd5b506100cb60048036038101906100c69190610869565b6105e4565b6040516100d891906108af565b60405180910390f35b3480156100ed57600080fd5b506100f66105fc565b60405161010391906108af565b60405180910390f35b34801561011857600080fd5b50610121610609565b60405161012e9190610929565b60405180910390f35b61013f6101a9565b005b34801561014d57600080fd5b5061015661062f565b6040516101639190610953565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e919061099a565b610653565b6040516101a09190610953565b60405180910390f35b6802b5e3af16b18800006101e8600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461069290919063ffffffff16565b1015610229576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022090610a24565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102779190610a73565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610368576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156104135760006001828154811061038e5761038d610aa7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061040b90610ad6565b91505061036b565b50600067ffffffffffffffff81111561042f5761042e610b1e565b5b60405190808252806020026020018201604052801561045d5781602001602082028036833780820191505090505b506001908051906020019061047392919061075f565b503373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156104ba573d6000803e3d6000fd5b5060003373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050905080610534576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052b90610b99565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff164760405161055a90610bea565b60006040518083038185875af1925050503d8060008114610597576040519150601f19603f3d011682016040523d82523d6000602084013e61059c565b606091505b50509050806105e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d790610c4b565b60405180910390fd5b5050565b60006020528060005260406000206000915090505481565b6802b5e3af16b188000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001818154811061066357600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008061069e836106ce565b90506000670de0b6b3a764000085836106b79190610c6b565b6106c19190610cdc565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561071c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107409190610d9a565b5050509150506402540be400816107579190610e15565b915050919050565b8280548282559060005260206000209081019282156107d8579160200282015b828111156107d75782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061077f565b5b5090506107e591906107e9565b5090565b5b808211156108025760008160009055506001016107ea565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108368261080b565b9050919050565b6108468161082b565b811461085157600080fd5b50565b6000813590506108638161083d565b92915050565b60006020828403121561087f5761087e610806565b5b600061088d84828501610854565b91505092915050565b6000819050919050565b6108a981610896565b82525050565b60006020820190506108c460008301846108a0565b92915050565b6000819050919050565b60006108ef6108ea6108e58461080b565b6108ca565b61080b565b9050919050565b6000610901826108d4565b9050919050565b6000610913826108f6565b9050919050565b61092381610908565b82525050565b600060208201905061093e600083018461091a565b92915050565b61094d8161082b565b82525050565b60006020820190506109686000830184610944565b92915050565b61097781610896565b811461098257600080fd5b50565b6000813590506109948161096e565b92915050565b6000602082840312156109b0576109af610806565b5b60006109be84828501610985565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610a0e601b836109c7565b9150610a19826109d8565b602082019050919050565b60006020820190508181036000830152610a3d81610a01565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a7e82610896565b9150610a8983610896565b9250828201905080821115610aa157610aa0610a44565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610ae182610896565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610b1357610b12610a44565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f53656e64206661696c6564000000000000000000000000000000000000000000600082015250565b6000610b83600b836109c7565b9150610b8e82610b4d565b602082019050919050565b60006020820190508181036000830152610bb281610b76565b9050919050565b600081905092915050565b50565b6000610bd4600083610bb9565b9150610bdf82610bc4565b600082019050919050565b6000610bf582610bc7565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610c35600b836109c7565b9150610c4082610bff565b602082019050919050565b60006020820190508181036000830152610c6481610c28565b9050919050565b6000610c7682610896565b9150610c8183610896565b9250828202610c8f81610896565b91508282048414831517610ca657610ca5610a44565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ce782610896565b9150610cf283610896565b925082610d0257610d01610cad565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610d2c81610d0d565b8114610d3757600080fd5b50565b600081519050610d4981610d23565b92915050565b6000819050919050565b610d6281610d4f565b8114610d6d57600080fd5b50565b600081519050610d7f81610d59565b92915050565b600081519050610d948161096e565b92915050565b600080600080600060a08688031215610db657610db5610806565b5b6000610dc488828901610d3a565b9550506020610dd588828901610d70565b9450506040610de688828901610d85565b9350506060610df788828901610d85565b9250506080610e0888828901610d3a565b9150509295509295909350565b6000610e2082610d4f565b9150610e2b83610d4f565b9250828202610e3981610d4f565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610e7157610e70610a44565b5b8282058414831517610e8657610e85610a44565b5b509291505056fea264697066735822122038d3b88dcaa47cb19af9828815c3b9a9ed67487736e3e3c4a9429e3a8379d0c264736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c8063741bef1a1161004e578063741bef1a1461010c578063b60d428814610137578063dba6335f14610141578063dc0d3dff1461016c57610083565b80633ccfd60b1461008d5780633e47d6f3146100a45780636b69a592146100e157610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102e3565b005b3480156100b057600080fd5b506100cb60048036038101906100c69190610869565b6105e4565b6040516100d891906108af565b60405180910390f35b3480156100ed57600080fd5b506100f66105fc565b60405161010391906108af565b60405180910390f35b34801561011857600080fd5b50610121610609565b60405161012e9190610929565b60405180910390f35b61013f6101a9565b005b34801561014d57600080fd5b5061015661062f565b6040516101639190610953565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e919061099a565b610653565b6040516101a09190610953565b60405180910390f35b6802b5e3af16b18800006101e8600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461069290919063ffffffff16565b1015610229576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022090610a24565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102779190610a73565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610368576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156104135760006001828154811061038e5761038d610aa7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061040b90610ad6565b91505061036b565b50600067ffffffffffffffff81111561042f5761042e610b1e565b5b60405190808252806020026020018201604052801561045d5781602001602082028036833780820191505090505b506001908051906020019061047392919061075f565b503373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156104ba573d6000803e3d6000fd5b5060003373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050905080610534576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052b90610b99565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff164760405161055a90610bea565b60006040518083038185875af1925050503d8060008114610597576040519150601f19603f3d011682016040523d82523d6000602084013e61059c565b606091505b50509050806105e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d790610c4b565b60405180910390fd5b5050565b60006020528060005260406000206000915090505481565b6802b5e3af16b188000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001818154811061066357600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008061069e836106ce565b90506000670de0b6b3a764000085836106b79190610c6b565b6106c19190610cdc565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561071c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107409190610d9a565b5050509150506402540be400816107579190610e15565b915050919050565b8280548282559060005260206000209081019282156107d8579160200282015b828111156107d75782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061077f565b5b5090506107e591906107e9565b5090565b5b808211156108025760008160009055506001016107ea565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108368261080b565b9050919050565b6108468161082b565b811461085157600080fd5b50565b6000813590506108638161083d565b92915050565b60006020828403121561087f5761087e610806565b5b600061088d84828501610854565b91505092915050565b6000819050919050565b6108a981610896565b82525050565b60006020820190506108c460008301846108a0565b92915050565b6000819050919050565b60006108ef6108ea6108e58461080b565b6108ca565b61080b565b9050919050565b6000610901826108d4565b9050919050565b6000610913826108f6565b9050919050565b61092381610908565b82525050565b600060208201905061093e600083018461091a565b92915050565b61094d8161082b565b82525050565b60006020820190506109686000830184610944565b92915050565b61097781610896565b811461098257600080fd5b50565b6000813590506109948161096e565b92915050565b6000602082840312156109b0576109af610806565b5b60006109be84828501610985565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610a0e601b836109c7565b9150610a19826109d8565b602082019050919050565b60006020820190508181036000830152610a3d81610a01565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a7e82610896565b9150610a8983610896565b9250828201905080821115610aa157610aa0610a44565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610ae182610896565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610b1357610b12610a44565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f53656e64206661696c6564000000000000000000000000000000000000000000600082015250565b6000610b83600b836109c7565b9150610b8e82610b4d565b602082019050919050565b60006020820190508181036000830152610bb281610b76565b9050919050565b600081905092915050565b50565b6000610bd4600083610bb9565b9150610bdf82610bc4565b600082019050919050565b6000610bf582610bc7565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610c35600b836109c7565b9150610c4082610bff565b602082019050919050565b60006020820190508181036000830152610c6481610c28565b9050919050565b6000610c7682610896565b9150610c8183610896565b9250828202610c8f81610896565b91508282048414831517610ca657610ca5610a44565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ce782610896565b9150610cf283610896565b925082610d0257610d01610cad565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610d2c81610d0d565b8114610d3757600080fd5b50565b600081519050610d4981610d23565b92915050565b6000819050919050565b610d6281610d4f565b8114610d6d57600080fd5b50565b600081519050610d7f81610d59565b92915050565b600081519050610d948161096e565b92915050565b600080600080600060a08688031215610db657610db5610806565b5b6000610dc488828901610d3a565b9550506020610dd588828901610d70565b9450506040610de688828901610d85565b9350506060610df788828901610d85565b9250506080610e0888828901610d3a565b9150509295509295909350565b6000610e2082610d4f565b9150610e2b83610d4f565b9250828202610e3981610d4f565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610e7157610e70610a44565b5b8282058414831517610e8657610e85610a44565b5b509291505056fea264697066735822122038d3b88dcaa47cb19af9828815c3b9a9ed67487736e3e3c4a9429e3a8379d0c264736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 58,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 61,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 73,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}